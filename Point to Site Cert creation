####################################################################################################################################
#Step 1: Create a temporary directory.#

if((Test-Path -Path c:\temp -ErrorAction SilentlyContinue) -eq $false){
    mkdir C:\temp
    cd 'C:\temp'
}
else {
    cd 'C:\temp'
}
#####################################################################################################################################
Step 1. Explanation
This code checks if the C:\temp directory exists. If it does not exist, the code creates the directory and 
then changes the current directory to C:\temp. If the directory already exists, 
the code simply changes the current directory to C:\temp.
#####################################################################################################################################
#Step 2: Create a self-signed root#

$cert = New-SelfSignedCertificate -Type Custom -KeySpec Signature `
    -Subject "CN=Root" `
    -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 `
    -KeyLength 2048 `
    -CertStoreLocation "Cert:\CurrentUser\My" `
    -KeyUsageProperty Sign -KeyUsage CertSign
####################################################################################################################################################
Step 2. Explanation
This code creates a self-signed root certificate. The certificate is named Root and has the CN (Common Name) of Root. 
The certificate is also exportable, which means that it can be exported to a file. 
The certificate is stored in the Cert:\CurrentUser\My certificate store. 
The certificate has the KeyUsageProperty Sign and the KeyUsage CertSign, which means that it can be used to sign other certificates and to sign code.
#####################################################################################################################################################
#Step 3: Generate a client certificate.#

New-SelfSignedCertificate `
    -Type Custom `
    -DnsName P2SChildCert `
    -KeySpec Signature `
    -Subject "CN=UsrClient" `
    -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 `
    -KeyLength 2048 `
    -CertStoreLocation "Cert:\CurrentUser\My" `
    -Signer $cert `
    -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.2")
##############################################################################################################################################################################
Step 3. Explanation
This code generates a client certificate. The certificate is named UsrClient and has the CN (Common Name) of UsrClient. 
The certificate is also exportable, which means that it can be exported to a file. The certificate is stored in the Cert:\CurrentUser\My certificate store. 
The certificate is signed by the AARoot certificate. 
The certificate also has the text extension 2.5.29.37={text}1.3.6.1.5.5.7.3.2, which is a Subject Alternative Name (SAN) extension that specifies the DNS name P2SChildCert.
############################################################################################################################################################################### 
#Step 4: Export the certificates.#

$RootCert = (Get-ChildItem `
    -Path "Cert:\CurrentUser\My\"`
    | Where-Object `
    -Property subject `
    -Match Root)
$ClientCert = (Get-ChildItem `
    -Path "Cert:\CurrentUser\My\"`
    | Where-Object `
    -Property subject `
    -Match UsrClient)
Export-Certificate `
    -Type CERT `
    -Cert $RootCert `
    -FilePath 'C:\temp\AARootTemp.cer' `
    -Force
Export-Certificate `
    -Type CERT `
    -Cert $ClientCert `
    -FilePath 'C:\temp\UsrClient.cer' `
    -Force
certutil -encode 'C:\temp\RootTemp.cer' 'Root.cer'
Get-Content C:\temp\Root.cer
cd c:\

##################################################################################################################################################################################
This code exports the Root and UsrClient certificates to files. 
The Root certificate is exported to the file C:\temp\RootTemp.cer. The UsrClient certificate is exported to the file C:\temp\UsrClient.cer. 
The RootTemp.cer file is then encoded to the file Root.cer. 
The Get-Content cmdlet is used to display the contents of the Root.cer file. Finally, the code changes the current directory back to C:\
###################################################################################################################################################################################



